generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  cognitoSub String?  @unique
  name       String
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  memberships   ProjectUser[]
  assignedTasks Task[]        @relation("AssignedTasks")
  reportedTasks Task[]        @relation("ReportedTasks")

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  users ProjectUser[]
  tasks Task[]

  @@map("projects")
}

model ProjectUser {
  projectId   String
  userId      String
  inviteToken String?
  invitedBy   String?
  invitedAt   DateTime?
  acceptedAt  DateTime?
  createdAt   DateTime  @default(now())

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@map("project_users")
}

model Task {
  id          String     @id @default(uuid())
  projectId   String
  title       String
  description String
  status      TaskStatus @default(BACKLOG)
  storyPoints Int

  assigneeId String?
  reporterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project  Project @relation(fields: [projectId], references: [id])
  assignee User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])
  reporter User    @relation("ReportedTasks", fields: [reporterId], references: [id])

  @@map("tasks")
}

enum TaskStatus {
  BACKLOG
  DOING
  DONE
}
