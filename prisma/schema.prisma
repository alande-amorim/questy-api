generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  cognitoSub String   @unique
  name       String
  email      String   @unique
  avatarUrl  String?
  xp         Int      @default(0)
  level      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  projects          Project[]       @relation("CreatedProjects")
  memberships       ProjectUser[]
  tasks             Task[]          @relation("AssignedTasks")
  createdTasks      Task[]          @relation("CreatedTasks")
  questPartnerTasks Task[]          @relation("QuestPartnerTasks")
  xpLogs            XPTransaction[]
  aiLogs            AIInteraction[]
  notifications     Notification[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())

  creator User          @relation("CreatedProjects", fields: [createdBy], references: [id])
  users   ProjectUser[]
  tasks   Task[]

  @@map("projects")
}

model ProjectUser {
  projectId String
  userId    String
  joinedAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@map("project_users")
}

model Task {
  id             String     @id @default(uuid())
  projectId      String
  title          String
  description    String
  status         TaskStatus @default(BACKLOG)
  difficulty     Difficulty @default(MEDIUM)
  storyPoints    Int
  assigneeId     String?
  createdById    String
  questPartnerId String?
  aiGenerated    Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  project        Project         @relation(fields: [projectId], references: [id])
  assignee       User?           @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator        User            @relation("CreatedTasks", fields: [createdById], references: [id])
  questPartner   User?           @relation("QuestPartnerTasks", fields: [questPartnerId], references: [id])
  xpTransactions XPTransaction[]
  aiInteractions AIInteraction[]

  @@map("tasks")
}

model XPTransaction {
  id        String   @id @default(uuid())
  userId    String
  taskId    String?
  type      XPType
  amount    Int
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id])
  task Task? @relation(fields: [taskId], references: [id])

  @@map("xp_transactions")
}

model AIInteraction {
  id        String   @id @default(uuid())
  userId    String
  taskId    String
  type      AIType
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@map("ai_interactions")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum TaskStatus {
  BACKLOG
  DOING
  DONE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum XPType {
  REFINE
  COMPLETE_TASK
  PAIR_PROGRAMMING
}

enum AIType {
  DESCRIPTION
  ACCEPTANCE_CRITERIA
}
